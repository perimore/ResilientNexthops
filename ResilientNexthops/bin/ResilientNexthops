#!/usr/bin/env python
# Copyright (c) 2018 Arista Networks, Inc.  All rights reserved.
# Arista Networks, Inc. Confidential and Proprietary.
#
# The ResilientNexthops application keeps the total number of nexthops the same by 
# replacing the deleted entry with one or more of the active entries to maintain the 
# order of entries in the nexthop-group.
# 
# The configuration to achieve resilient nexthop behaviour is shown below:
#
# daemon ResilientNexthops
#    exec /mnt/flash/ResilientNexthops
#    option 0 value <Nexthop via FW1>
#    option 1 value <Nexthop via FW2>
#    option 2 value <Nexthop via FW3>
#    option GROUP_NAME value NextHopGroup1
#    no shutdown
#

import eossdk
import sys
import syslog
import re
import time
import itertools
from operator import itemgetter

NexthopList = []
NexthopGroupName = "NH1"

class ResilientNexthopHandler( eossdk.AgentHandler, eossdk.NeighborTableHandler ):
   def __init__( self, neighborMgr, nexthopGroupMgr, agentMgr ):
      # Initialise the handlers
      eossdk.AgentHandler.__init__( self, agentMgr )
         # pylint: disable-msg=W0233
      eossdk.NeighborTableHandler.__init__( self, neighborMgr )
         # pylint: disable-msg=W0233
      self.tracer = eossdk.Tracer("ResilientNexthopsAgent")
      self.agentMgr_ = agentMgr
      self.neighborMgr_ = neighborMgr
      self.nexthopGroupMgr_ = nexthopGroupMgr
      syslog.syslog("Constructed")
      self.tracer.trace0("Constructed")

   # Callback provided by AgentHandler when all state is synchronized
   def on_initialized( self ):
      # Called when the agent is initialised to set the status
      lastChangeTime = re.sub( ' +', ' ', time.ctime() )
      self.agentMgr_.status_set("Agent Status:", "Administratively Up (Since: %s)" 
         % str(lastChangeTime))
      self.watch_all_neighbor_entries( True )  # pylint: disable-msg=E1101
      self.tracer.trace0("We are initialized!" )
      syslog.syslog( "We are initialized!" )
      self.BuildNexthopList()

   def on_agent_option( self, option, value ):
      global NexthopGroupName
      self.agentMgr_.status_del("Config Error:")
      self.agentMgr_.status_del("Nexthop%s:" % option)
      if str(option) == "GROUP_NAME" :
         if self.nexthopGroupMgr_.exists(NexthopGroupName):
            self.nexthopGroupMgr_.nexthop_group_del(NexthopGroupName)
         if value == "":
            NexthopGroupName = "NH1"

      #Report the config change
      status = "Nexthop configuration changed: %s = " % str(option)
      if value == "":
         status += "Removed"
      else:
         status += str(value)
      self.tracer.trace0( status )
      
      self.BuildNexthopList()
      
   def BuildNexthopList(self):
      # Create a list of nexthops to load balance across
      global NexthopList
      global NexthopGroupName
      NexthopList = []
      # Get the configuration options
      for nhEntry in self.agentMgr_.agent_option_iter():
         # If the option is a number, this must be a next-hop
         if nhEntry.isdigit():
            # Get an IP object back. self.get_ip_addr also checks this is a valid IP
            ip = self.get_ip_addr( self.agentMgr_.agent_option(nhEntry) )
            # IPv6 is not yet supported. Contact Arista for more information.
            if ip.af() == 4 :
               # [ Entry Number, IP Address, Active ]
               NexthopList.append( [int(nhEntry), ip, False] )
            else:
               self.agentMgr_.status_set( "Config Error:" , 
                  "Invalid address type. Only IPv4 is supported today.")
         # Non-default Nexthop-group name
         elif nhEntry == "GROUP_NAME":
            NexthopGroupName = self.agentMgr_.agent_option("GROUP_NAME")
         # Else this an invalid config option.
         else:   
            self.agentMgr_.status_set( "Config Error:" , 
               "Invalid config option (\"%s\"). \
               Use only integers to define a nexthop entry" % str(nhEntry))

      self.agentMgr_.status_set("Nexthop-Group Name:", NexthopGroupName)

      # If we have any valid configured nexthops, continue.
      if len( NexthopList ) > 0:
         self.tracer.trace3( "Initial order of nexthops: " + 
            str(list(map(lambda x: x[1].to_string(), NexthopList))))
         # Python reads the config options in a random order. 
         # This sorts them in the correct order.
         NexthopList.sort(key=itemgetter(0))
         self.tracer.trace3( "Sorted order of nexthops: " + 
            str(list(map(lambda x: x[1].to_string(), NexthopList))))
         # Setup the nexthop group
         self.agentMgr_.status_set("Config Status:" , "%s valid nexthops defined" % 
            len( NexthopList ))
         self.BuildNexthopGroup()
      else:
         self.agentMgr_.status_set( "Config Status:" , "No nexthops are defined" )
         self.agentMgr_.status_del( "Hardware Entries:" )

   def BuildNexthopGroup(self):
      global NexthopList
      # Calculate the lowest common multiple of the nexthop entries
      # This allows the script to fairly distribute traffic in the event of a
      # nexthop failure.
      possibleNexthops = range(len(NexthopList), 0, -1)
      numNexthops = self.lcmm(*possibleNexthops)
      # Create a nexthop group object
      nexthopGroup = eossdk.NexthopGroup( NexthopGroupName, eossdk.NEXTHOP_GROUP_IP)

      # Work out if we have an active ARP entry
      for idx, entry in enumerate(NexthopList):
         # Create a neighbour key using the nexthop IP
         neighbor_key = eossdk.NeighborKey( entry[1] )
         # Try and find the neighbour entry using the neighbour key
         neighbor_entry = self.neighborMgr_.neighbor_entry_status(neighbor_key)
         # If an entry is found, get the actual entry
         if neighbor_entry == eossdk.NeighborEntry():
            neighbor_entry = self.neighborMgr_.neighbor_entry(neighbor_key)
         # If no entry is returned, it is not active
         if neighbor_entry == eossdk.NeighborEntry():
            NexthopList[idx][2] = False
         # Else it is is active, set the active flag
         else:
            NexthopList[idx][2] = True
         self.tracer.trace3("Nexthop entry: %s - Up: %s" % 
            (entry[1].to_string(), entry[2]))

      # Set the status of the nexthops in the daemon output
      for option in NexthopList:
         if option[2]:
            status = "%s Up" % option[1].to_string()
         else:
            status = "%s Down" % option[1].to_string()
         self.agentMgr_.status_set("Nexthop%s:" % option[0], status)
      
      self.BuildNextHopGroupEntries(numNexthops, nexthopGroup)

   def BuildNextHopGroupEntries(self, numNexthops, nexthopGroup):
      self.agentMgr_.status_set("Hardware Entries:", str(numNexthops) )
      # Build the successful Nexthops
      x = 0
      # Create a list of active and failed nexthops
      activeNexthops = []
      failedNexthops = []
      # Loop the least common multiplier of the number of nexthops
      for i in range(numNexthops):
         # If the entry is active, set the ip as an eossdk.IpAddr object
         if NexthopList[i-x][2]:
            ip = NexthopList[i-x][1]
            nexthopGroup.nexthop_set(i, eossdk.NexthopGroupEntry(ip))
            # Add the IP address to the active nexthops
            activeNexthops.append(ip)
         else:
            # Add the failed nexthop entry number to a new array.
            # We will cycle this later
            failedNexthops.append(i)
         # Increment x if we have reached the end of the configured nexthops but
         # we have expanded to the LCM
         if i==((len(NexthopList)-1) + x): 
            x += len(NexthopList)

      # Report the status of the nexthops
      if len(failedNexthops) > 0:
         self.tracer.trace3("Failed nexthops: " + str(failedNexthops))
      else:
         self.tracer.trace3("Failed nexthops: None")
      
      if len(activeNexthops) > 0:
         self.tracer.trace3("Active nexthops: " + 
            str(list(map(lambda x: x.to_string(), activeNexthops))))
      else:
         self.tracer.trace3("Active nexthops: None")

      # If there are failed entries, fill in the gaps if we have active nexthops
      if len(failedNexthops) > 0 and len(activeNexthops) > 0:
         # Allow the active nexthops to be iterated cyclicly
         activeNexthopsCycle = itertools.cycle(activeNexthops)
         # For each failed entry, fill in with the next active entry
         for entry in failedNexthops:
            activeNexthopFiller = next(activeNexthopsCycle)
            nexthopGroup.nexthop_set(entry, 
               eossdk.NexthopGroupEntry(activeNexthopFiller))
      
      # If there are active nexthops, create the nexthop-group. Otherwise, remove it.
      # This allows the static route pointing to the nexthop-group to become inactive
      if len(activeNexthops) > 0:
         self.nexthopGroupMgr_.nexthop_group_set(nexthopGroup)
      elif self.nexthopGroupMgr_.exists(NexthopGroupName):
         self.nexthopGroupMgr_.nexthop_group_del(NexthopGroupName)

   def get_ip_addr(self, ip_addr):
      try:
         return eossdk.IpAddr(ip_addr)
      except eossdk.Error as e:
         sys.stderr.write('Invalid IP address: %s (%s)' % (ip_addr, e))

   # Callback provided by NeighbourHandler when an ARP entry changes
   def on_neighbor_entry_set( self, neighborEntry ):
      entryIp = neighborEntry.neighbor_key().ip_addr()
      self.checkForEntry(entryIp)

   # Callback provided by NeighbourHandler when an ARP entry is deleted
   def on_neighbor_entry_del( self, neighborKey ):
      entryIp = neighborKey.ip_addr()
      self.checkForEntry(entryIp)
        
   def checkForEntry(self, entryIp):
      for i in NexthopList:
         if i[1] == entryIp:
            self.BuildNexthopGroup()
            break
        
   # Calculate the Lowest Common Multiplier
   def lcm(self, x,y):
      tmp=x
      while (tmp%y)!=0:
         tmp+=x
      return tmp

   def lcmm(self, *args):
      return reduce(self.lcm,args)

sdk = eossdk.Sdk()
mta = ResilientNexthopHandler( sdk.get_neighbor_table_mgr(),
   sdk.get_nexthop_group_mgr(), sdk.get_agent_mgr() )
sdk.main_loop( sys.argv )